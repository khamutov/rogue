{"version":3,"sources":["tools/tree_parser.js","App.js","reportWebVitals.js","index.js"],"names":["RD3Component","rd3","Component","gen_data","treeData","console","log","margin","width","height","root","d3","treeLayout","size","rootNode","document","createElement","g","append","attr","links","node","selectAll","data","descendants","enter","d","name","x","y","text","classed","source","target","buildTree","tree","idx","nodes_array","left_idx","length","subtree","children","push","right_idx","parseStr","str","nodes","split","TreeParserPage","useState","d3node","setD3node","treeStr","setTreeStr","initial_tree","useEffect","cols","value","placeholder","onChange","e","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.63160aa3.chunk.js","sourcesContent":["import rd3 from 'react-d3-library';\n\nimport * as d3 from \"d3\";\nimport {useEffect, useState} from \"react\";\n\nimport './tree_parser.css';\n\nconst RD3Component = rd3.Component;\n\nfunction gen_data(treeData) {\n  console.log(\"runned!\");\n\n  const margin = {top: 20, right: 120, bottom: 20, left: 120},\n    width = 960 - margin.right - margin.left,\n    height = 500 - margin.top - margin.bottom;\n\n  const root = d3.hierarchy(treeData);\n  // var width = 400, height = 420;\n\n  const treeLayout = d3.cluster();\n  treeLayout.size([400, 200]);\n  treeLayout(root);\n\n  var rootNode = document.createElement('div');\n  const svg = d3.select(rootNode).append(\"svg\")\n    .attr(\"width\", width)\n    .attr(\"height\", height);\n\n  const g = svg.append(\"g\")\n    .attr(\"font-family\", \"sans-serif\")\n    .attr(\"font-size\", 10)\n    .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n  const links = g.append(\"g\").attr(\"class\", \"links\");\n  const nodes = g.append(\"g\").attr(\"class\", \"nodes\");\n\n  // Nodes\n  var node = nodes\n    .selectAll('circle.node')\n    .data(root.descendants())\n    .enter()\n    .append(\"g\")\n    .attr(\"class\", function(d) {\n      if (d.data.name === \"null\") {\n        return \"node-invisible\"\n      }\n\n      return \"node\";\n    })\n    .attr(\"visibility\", function(d) {\n    if (d.data.name === \"null\") {\n      return \"hidden\"\n    }\n\n    return \"visible\";\n  });\n    // .classed('node', true);\n\n  node.append('circle')\n    .attr('cx', function(d) {return d.x;})\n    .attr('cy', function(d) {return d.y;})\n    .attr('r', 10);\n\n\n  // adds the text to the node\n  node\n    .append(\"text\")\n    .attr(\"dx\", function(d) {return d.x - 3;})\n    .attr(\"dy\", function(d) {return d.y + 3;})\n    // .style(\"text-anchor\", \"middle\")\n    .text(function(d) {\n      console.log(d);\n      return d.data.name;\n    });\n\n  // Links\n  links\n    .selectAll('line.link')\n    .data(root.links())\n    .enter()\n    .append('line')\n    .classed('link', true)\n    .attr('x1', function(d) {return d.source.x;})\n    .attr('y1', function(d) {return d.source.y;})\n    .attr('x2', function(d) {return d.target.x;})\n    .attr('y2', function(d) {return d.target.y;})\n    .attr(\"visibility\", function(d) {\n      if (d.target.data.name === \"null\") {\n        return \"hidden\"\n      }\n\n      return \"visible\";\n    });\n\n  return rootNode;\n}\n\nfunction buildTree(tree, idx, nodes_array) {\n  const left_idx = idx * 2 + 1;\n\n  if (left_idx < nodes_array.length) {\n    var subtree = {};\n    subtree.name = nodes_array[left_idx];\n    if (subtree.name !== \"null\") {\n      buildTree(subtree, left_idx, nodes_array);\n    }\n    if (!tree.children) {\n      tree.children = [];\n    }\n    tree.children.push(subtree);\n  }\n\n  const right_idx = idx * 2 + 2;\n  if (right_idx < nodes_array.length) {\n    var subtree = {};\n    subtree.name = nodes_array[right_idx];\n    if (subtree.name !== \"null\") {\n      buildTree(subtree, right_idx, nodes_array);\n    }\n    if (!tree.children) {\n      tree.children = [];\n    }\n    tree.children.push(subtree);\n  }\n}\n\nfunction parseStr(str) {\n  const nodes = str.split(\",\");\n\n  var treeData = {}\n\n  if (nodes.length === 0) {\n    return treeData;\n  }\n\n  treeData.name = nodes[0];\n  treeData.children = [];\n\n  console.log(treeData);\n\n  buildTree(treeData, 0, nodes);\n\n  return treeData;\n}\n\nexport function TreeParserPage() {\n  const [d3node, setD3node] = useState('');\n  const [treeStr, setTreeStr] = useState('1,2,3,4,5,null,7,8,9,0,11,12,13,14,15');\n\n  const initial_tree = parseStr(treeStr);\n\n  useEffect(() => {\n    setD3node(gen_data(initial_tree));\n  }, []);\n\n  function handleTreeChange(e) {\n    const treeData = parseStr(e.target.value);\n    setTreeStr(e.target.value);\n    // setTreeStr(JSON.stringify(treeData));\n\n    setD3node(gen_data(treeData));\n  }\n\n  return (\n    <div>\n      <h1>Tree parser and visualizer</h1>\n      <textarea cols=\"60\" value={treeStr} placeholder=\"Heap tree repr\" onChange={handleTreeChange} />\n      <div>\n        <p>Current tree</p>\n        <p>{treeStr}</p>\n      </div>\n      <div>\n        <RD3Component data={d3node} />\n      </div>\n    </div>\n\n  )\n}","import './App.css';\nimport {TreeParserPage} from \"./tools/tree_parser\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TreeParserPage />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}